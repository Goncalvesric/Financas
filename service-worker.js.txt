// Define o nome do cache
const CACHE_NAME = 'finance-tracker-cache-v2'; // Mudei a versão para forçar a atualização
// Lista de ficheiros a serem guardados em cache
const urlsToCache = [
  './',
  './index.html',
  './manifest.json'
];

// Evento de instalação: abre o cache e adiciona os ficheiros principais
self.addEventListener('install', function(event) {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(function(cache) {
        console.log('Cache aberto');
        return cache.addAll(urlsToCache);
      })
  );
});

// Evento de fetch: intercepta os pedidos de rede
self.addEventListener('fetch', function(event) {
  // Ignora os pedidos que não são GET (ex: POST para o Firebase)
  if (event.request.method !== 'GET') {
    return;
  }
  
  // Ignora os pedidos para o Firebase e outros domínios externos
  if (!event.request.url.startsWith(self.location.origin)) {
      return;
  }

  event.respondWith(
    caches.match(event.request)
      .then(function(response) {
        // Se o ficheiro estiver em cache, retorna-o
        if (response) {
          return response;
        }
        // Caso contrário, faz o pedido à rede
        return fetch(event.request);
      }
    )
  );
});

// Evento de ativação: limpa caches antigos
self.addEventListener('activate', event => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});